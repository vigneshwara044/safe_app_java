import de.undercouch.gradle.tasks.download.Download

apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    flavorDimensions "app"
    productFlavors {
        mock {
            dimension "app"
        }
        nonMock {
            dimension "app"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main {
            java {
                srcDir("$rootDir/api/src/main/java")
                srcDir("$rootDir/lib/src/main/java")
            }
        }
        mock {
            java.srcDir("$rootDir/safe-authenticator/src/main/java")
        }
    }
}

android.libraryVariants.all { variant ->
    variant.outputs.all { it ->
        outputFileName = "safe-app-android-${it.baseName}-${android.defaultConfig.versionName}.aar"
    }
}
tasks.withType(JavaCompile) {
  configure(options) {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
  }
}

task javadoc(type: Javadoc) {
  failOnError false
    exclude('**/net/maidsafe/safe_authenticator')
    exclude('**/net/maidsafe/utils')
    exclude('**/net/maidsafe/safe_app/Callback*')
    exclude('**/net/maidsafe/api/model/*IpcReq*')
    exclude('**/NativeBindings.java')
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {

        classpath 'com.android.tools.build:gradle:3.3.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

static def getCombinations() {
    def packages = [ 'safe_app', 'safe_app_jni', 'safe_authenticator', 'safe_authenticator_jni' ]
    def archs = [ 'x86_64', 'armeabiv7a' ]
    def variants = [ 'mock', 'nonMock' ]
    [packages, archs, variants].combinations().findAll { it ->
        !(it[0].contains('safe_authenticator') && it[2] == 'nonMock')
    }
}

def nativeLibsVersion = "0.9.0"
def tempLibDir = "${projectDir}/.temp_downloads"

task("downloadNativeLibs", type: Download) {
    File dir = new File(tempLibDir)
    if (!dir.exists()) {
        dir.mkdir()
    }
    def endPoints = getCombinations().collect {
        "https://s3.eu-west-2.amazonaws.com/safe-client-libs/${it[0]}${it[2] == 'mock' ? '-mock' : ''}-${nativeLibsVersion}-android-${it[1]}.zip"
    }
    src(endPoints)
    dest tempLibDir
}

task("attachTests", type: Copy) {
    from fileTree("${rootDir}/safe-app/src/test/java/net/maidsafe/api")
    into file("${projectDir}/src/androidTest/java/net/maidsafe/api")
}

task runInstrumentationTests(dependsOn: "attachTests") {
    dependsOn('connectedMockDebugAndroidTest')
    doLast {
        delete "${projectDir}/src/androidTest/java/net/maidsafe/api"
    }
}

task("unzipNativeLibs", type: Copy) {
    dependsOn << ['downloadNativeLibs']
    from zipTree("${tempLibDir}/${nativeLibsVersion}.zip")
    into tempLibDir
    doLast {
        copy {
            from tempLibDir + "/android/lib/mock/"
            into "${projectDir}/src/mock/jniLibs"
        }
        copy {
            from tempLibDir + "/android/lib/nonNock/"
            into "${projectDir}/src/nonMock/jniLibs"
        }
    }
}

tasks.addRule('Pattern: unzip-<ID>') { String taskName ->
    if(taskName.startsWith("unzip")) {
        task(taskName, type: Copy) {
            def args = name.split('-')
            String lib = args[1]
            String arch = args[2] == 'x86_64' ? 'x86_64' : 'armeabi-v7a'
            boolean isMock = args[3] == "mock"
            from zipTree("${tempLibDir}/${lib}-${isMock ? 'mock-' : ''}${nativeLibsVersion}-android-${args[2]}.zip")
            into "${projectDir}/src/${args[3]}/jniLibs/${arch}/"
        }
    }
}

task("download-nativelibs", type: Delete) {
    dependsOn << ['downloadNativeLibs', getCombinations().collect {
        "unzip-${it[0]}-${it[1]}-${it[2]}"
    }]
    delete tempLibDir
}
